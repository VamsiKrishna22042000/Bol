{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\DELL\\\\Desktop\\\\Ionink Company\\\\InfoPillar Solution Task - 02\\\\src\\\\components\\\\Table.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { createTable, useTableInstance, getCoreRowModel } from \"@tanstack/react-table\";\nimport STUDENTS from \"../student.json\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Table = () => {\n  _s();\n  const table = createTable();\n  const defaultData = [...STUDENTS];\n  const defaultColumns = [table.createGroup({\n    header: \"Full Name\",\n    columns: [table.createDataColumn(\"firstName\", {\n      id: \"First Name\"\n    }), table.createDataColumn(\"middleName\", {\n      id: \"Middle Name\"\n    }), table.createDataColumn(\"lastName\", {\n      id: \"Last Name\"\n    })]\n  }), table.createDataColumn(\"age\", {\n    id: \"Age\"\n  }), table.createGroup({\n    header: \"Phone Number\",\n    columns: [table.createDataColumn(row => row.phone[1], {\n      id: \"Phone Number 1\"\n    }), table.createDataColumn(row => row.phone[2], {\n      id: \"Phone Number 2\"\n    })]\n  }), table.createDataColumn(\"email\", {\n    id: \"E-mail Address\"\n  }), table.createGroup({\n    header: \"Full Address\",\n    columns: [table.createDataColumn(row => row.address.street, {\n      id: \"Street\"\n    }), table.createDataColumn(row => row.address.city, {\n      id: \"City\"\n    }), table.createDataColumn(row => row.address.state, {\n      id: \"Address\"\n    }), table.createDataColumn(row => row.address.pincode, {\n      id: \"Pin Code\"\n    })]\n  }), table.createGroup({\n    header: \"Date Details\",\n    columns: [table.createDataColumn(\"date_of_birth\", {\n      id: \"Date of Birth\",\n      cell: props => new Date(props.getValue()).toDateString()\n    }), table.createDataColumn(\"date_of_admission\", {\n      id: \"Date of Admission\",\n      cell: props => new Date(props.getValue()).toDateString()\n    })]\n  })];\n  const [data, setData] = useState([...defaultData]);\n  const [columns, setColumns] = useState([...defaultColumns]);\n  const instance = useTableInstance(table, {\n    data,\n    columns,\n    getCoreRowModel: getCoreRowModel()\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"table\", {\n      border: 1,\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 86,\n    columnNumber: 5\n  }, this);\n};\n_s(Table, \"cGPImmsQqu80CjBs7H2bEvmuqYI=\", false, function () {\n  return [useTableInstance];\n});\n_c = Table;\nexport default Table;\nvar _c;\n$RefreshReg$(_c, \"Table\");","map":{"version":3,"names":["React","useState","createTable","useTableInstance","getCoreRowModel","STUDENTS","jsxDEV","_jsxDEV","Table","_s","table","defaultData","defaultColumns","createGroup","header","columns","createDataColumn","id","row","phone","address","street","city","state","pincode","cell","props","Date","getValue","toDateString","data","setData","setColumns","instance","children","border","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/DELL/Desktop/Ionink Company/InfoPillar Solution Task - 02/src/components/Table.jsx"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport {\r\n  createTable,\r\n  useTableInstance,\r\n  getCoreRowModel,\r\n} from \"@tanstack/react-table\";\r\nimport STUDENTS from \"../student.json\";\r\n\r\nconst Table = () => {\r\n  const table = createTable();\r\n  const defaultData = [...STUDENTS];\r\n  const defaultColumns = [\r\n    table.createGroup({\r\n      header: \"Full Name\",\r\n      columns: [\r\n        table.createDataColumn(\"firstName\", {\r\n          id: \"First Name\",\r\n        }),\r\n        table.createDataColumn(\"middleName\", {\r\n          id: \"Middle Name\",\r\n        }),\r\n        table.createDataColumn(\"lastName\", {\r\n          id: \"Last Name\",\r\n        }),\r\n      ],\r\n    }),\r\n    table.createDataColumn(\"age\", {\r\n      id: \"Age\",\r\n    }),\r\n    table.createGroup({\r\n      header: \"Phone Number\",\r\n      columns: [\r\n        table.createDataColumn((row) => row.phone[1], {\r\n          id: \"Phone Number 1\",\r\n        }),\r\n        table.createDataColumn((row) => row.phone[2], {\r\n          id: \"Phone Number 2\",\r\n        }),\r\n      ],\r\n    }),\r\n    table.createDataColumn(\"email\", {\r\n      id: \"E-mail Address\",\r\n    }),\r\n    table.createGroup({\r\n      header: \"Full Address\",\r\n      columns: [\r\n        table.createDataColumn((row) => row.address.street, {\r\n          id: \"Street\",\r\n        }),\r\n        table.createDataColumn((row) => row.address.city, {\r\n          id: \"City\",\r\n        }),\r\n        table.createDataColumn((row) => row.address.state, {\r\n          id: \"Address\",\r\n        }),\r\n        table.createDataColumn((row) => row.address.pincode, {\r\n          id: \"Pin Code\",\r\n        }),\r\n      ],\r\n    }),\r\n    table.createGroup({\r\n      header: \"Date Details\",\r\n      columns: [\r\n        table.createDataColumn(\"date_of_birth\", {\r\n          id: \"Date of Birth\",\r\n          cell: (props) => new Date(props.getValue()).toDateString(),\r\n        }),\r\n        table.createDataColumn(\"date_of_admission\", {\r\n          id: \"Date of Admission\",\r\n          cell: (props) => new Date(props.getValue()).toDateString(),\r\n        }),\r\n      ],\r\n    }),\r\n  ];\r\n\r\n  const [data, setData] = useState([...defaultData]);\r\n  const [columns, setColumns] = useState([...defaultColumns]);\r\n\r\n  const instance = useTableInstance(table, {\r\n    data,\r\n    columns,\r\n    getCoreRowModel: getCoreRowModel(),\r\n  });\r\n\r\n  return (\r\n    <div>\r\n      <table border={1}>\r\n        <thead>\r\n          {/* {instance.getHeaderGroups().map((headerGroup) => (\r\n            <tr key={headerGroup.id}>\r\n              {headerGroup.headers.map((header) => (\r\n                <th key={header.id} colSpan={header.colSpan}>\r\n                  {header.isPlaceholder ? null : header.renderHeader()}\r\n                </th>\r\n              ))}\r\n            </tr>\r\n          )} */}\r\n        </thead>\r\n        <tbody>\r\n          {/* {instance.getRowModel().rows.map((row) => (\r\n            <tr key={row.id}>\r\n              {row.getVisibleCells().map((cell) => (\r\n                <td key={cell.id}>{cell.renderCell()}</td>\r\n              ))}\r\n            </tr>\r\n          )} */}\r\n        </tbody>\r\n      </table>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Table;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}